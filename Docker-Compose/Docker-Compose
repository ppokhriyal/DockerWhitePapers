Docker-Compose
==============

Compose is a tool for defining and running multi-container Docker applications.With
Compose,we can use YAML file to configure the application's services.Then with a single
command,we can create and start all the services from YAML configuration.

3-step process:

1. Define app's environment with a Dockerfile
2. Define services that make up your app in docker-compose.yml.
3. Run docker-compose up

Compose has commands for managing the whole lifecycle of your application

- Start,Stop and rebuild services
- View the status of running services
- Stream the log output of running services

Service configuration
---------------------
The Compose file is a YAML file defining services,networks and volumes.
The default path for a compose file is ./docker-compose.yml .

Using Dockerfile
----------------
We can use the Dockerfile in our docker-compose file with the help of below instruction

version: "3.8"
services:
  web:
   build: ./

'build' instruction followed by the absolute-path of the dockerfile.

version: "3.8"
services:
  web:
   build:
    context: ./

'context' instruction followed by the absolute-path of the dockerfile.
	 
If we specify build and image as well,then Compose will build the image with 'image:' instruction.

Replicas
--------
Create replicas of containers

version: "3.8"
services:
  web:
   build: .
   deploy:
    replicas: 2

Command
-------
overrides the CMD instruction in dockerfile,if exists

version: "3.8"
services:
  web:
   build: .
   command: /bin/bash

Custom Container name
---------------------
container_name: my_custom_container

Depends_on
----------
depends_on,express dependency between services

version: "3.8"
services:
  web:
   image: ubuntu:latest
   depends_on:
     - db
  db:
   image: redis

compose will first start the db service.depends_on does'nt wait db to be up and ready before starting the web.

Network
-------
version: "3.8"
services:
  web:
   build:
    context: .
    network: host or custom_network

SHM_SIZE
--------
version: "3.8"
services:
  web:
   build:
    context: .
    shm_size: '2gb'


